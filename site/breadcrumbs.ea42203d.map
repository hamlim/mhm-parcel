{"version":3,"sources":["components/breadcrumbs.js"],"names":["WrappedBreadcrumbs","Div","toUppercase","string","charAt","toUpperCase","slice","buildPath","currentIndex","arr","Breadcrumbs","routeProps","location","pathname","split","filter","Boolean","reduce","acc","item","ndx","join","links","link","length","r"],"mappings":";AAyCeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzCf,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,kBAuCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,IAAAA,IAAAA,KAAAA,EAAAA,GAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,OAAAA,gBAAAA,OAAAA,yBAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,GAAAA,EAAAA,KAAAA,EAAAA,IAAAA,OAAAA,eAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OAAAA,EAAAA,QAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,IAAAA,SAAAA,IAAAA,MAAAA,IAAAA,UAAAA,mDAAAA,SAAAA,EAAAA,GAAAA,GAAAA,OAAAA,YAAAA,OAAAA,IAAAA,uBAAAA,OAAAA,UAAAA,SAAAA,KAAAA,GAAAA,OAAAA,MAAAA,KAAAA,GAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,QAAAA,GAAAA,CAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,EAAAA,QAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OAAAA,GAAAA,SAAAA,IAAAA,IAAAA,EAAAA,EAAAA,CAAAA,+BAAAA,OAAAA,EAAAA,WAAAA,OAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,IAAAA,EAAAA,EAAAA,MAAAA,IAAAA,OAAAA,OAAAA,OAAAA,iBAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,OAAAA,OAAAA,OArCf,IAAMC,GAAM,EAAO,EAAA,SAAA,MAAP,CAAZ,KAIMC,EAAc,SAAAC,GAAUA,OAAAA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IAEtEC,EAAY,SAACC,EAAcC,GAAQA,OAAAA,EAAIH,MAAM,EAAGE,IAEhDE,EAAc,SAAA,GAClBC,OADqBA,EAAAA,WACVC,SAASC,SACjBC,MAAM,KACNC,OAAOC,SACPC,OACC,SAACC,EAAKC,EAAMC,EAAKX,GACZS,OAAAA,EAAAA,GACH,OAAA,CAAA,EAAC,QAAA,cAAA,EAAD,KAAA,CAAM,IAAKX,EAAUa,EAAM,EAAGX,GAAKY,KAAK,KAAM,GAAQd,IAAAA,OAAAA,EAAUa,EAAM,EAAGX,GAAKY,KAAK,OAChFnB,EAAYiB,OAGjB,IAEDF,OAAO,SAACK,EAAOC,EAAMH,EAAKX,GACrBW,OAAAA,IAAQX,EAAIe,OAAS,EACZF,EAAAA,GAAO,OAAA,CAAA,EAAC,QAAA,cAAA,EAAD,SAAA,CAAU,IAAKF,GAAOG,IAAAA,KACvB,IAARH,EACEE,EAAAA,GAAO,OAAA,CAAA,EAAC,QAAA,cAAA,EAAD,SAAA,CAAU,IAAKF,GAAMG,EAAvC,QAEWD,EAAAA,GAAO,OAAA,CAAA,EAAC,QAAA,cAAA,EAAD,SAAA,CAAU,IAAKF,GAAOG,IAAAA,EAAxC,SAED,KAEDvB,EAAqB,WACzB,OAAA,EAAC,QAAA,cAAA,EACC,KAAA,EAAC,QAAA,cAAA,EAAD,MAAA,CAAO,KAAK,GAAG,OAAQ,SAAAyB,GAAK,OAAA,EAAC,QAAA,cAAA,EAAD,CAAa,WAAYA,SAI1CzB,EAAAA,EAAAA,QAAAA,QAAAA","file":"breadcrumbs.ea42203d.map","sourceRoot":"../src","sourcesContent":["import React, { Fragment } from 'react'\nimport { Route, Link } from 'react-router-dom'\nimport styled from 'react-emotion'\n\nconst Div = styled('div')`\n  margin-bottom: 2rem;\n`\n\nconst toUppercase = string => string.charAt(0).toUpperCase() + string.slice(1)\n\nconst buildPath = (currentIndex, arr) => arr.slice(0, currentIndex)\n\nconst Breadcrumbs = ({ routeProps }) =>\n  routeProps.location.pathname\n    .split('/')\n    .filter(Boolean)\n    .reduce(\n      (acc, item, ndx, arr) => [\n        ...acc,\n        <Link key={buildPath(ndx + 1, arr).join('/')} to={`/${buildPath(ndx + 1, arr).join('/')}`}>\n          {toUppercase(item)}\n        </Link>,\n      ],\n      [],\n    )\n    .reduce((links, link, ndx, arr) => {\n      if (ndx === arr.length - 1) {\n        return [...links, <Fragment key={ndx}> {link}</Fragment>]\n      } else if (ndx === 0) {\n        return [...links, <Fragment key={ndx}>{link} /</Fragment>]\n      } else {\n        return [...links, <Fragment key={ndx}> {link} /</Fragment>]\n      }\n    }, [])\n\nconst WrappedBreadcrumbs = () => (\n  <Div>\n    <Route path=\"\" render={r => <Breadcrumbs routeProps={r} />} />\n  </Div>\n)\n\nexport default WrappedBreadcrumbs\n"]}